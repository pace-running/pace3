#!/bin/bash

###############################################################################
# Shell script
###############################################################################
# Shell script options
set -e

###############################################################################
# Execution environment
###############################################################################

# shellcheck disable=SC2034
PROJECT_DIR="$(
  cd "$(dirname "$0")" >/dev/null 2>&1
  pwd -P
)"

###############################################################################
# Setup
###############################################################################

##DOC install - Install application dependencies
task_install() {
  log_running_command "cargo build..."
  cargo build
}

##DOC update - Update application dependencies
task_update() {
  log_running_command "cargo update..."
  cargo update
}

##DOC create_migration [name] - Create a new diesel migration
task_create_migration() {
  if [[ $# -eq 0 ]]; then
      help
  fi
  log_running_command "create a new diesel migration..."
  diesel migration generate "$1"
}

##DOC migrate - Run database migration
task_migrate() {
  log_running_command "Run database migrations..."
   docker-compose down
   docker-compose up -d
  cargo install diesel_cli --force --no-default-features --features postgres
  diesel setup
  diesel migration run
  cargo fmt
}

###############################################################################
# Start
###############################################################################

##DOC start - Start the application
task_start() {
  log_running_command "application..."
  task_migrate
  cargo run
}

###############################################################################
# Test
###############################################################################

##DOC fmt_check - Run Formatting check by fmt
task_fmt_check() {
  log_running_command "formatting check..."
  cargo fmt --all -- --check
}

##DOC test_unit - Run all unit tests
task_test_unit() {
  log_running_command "unit tests..."
  cargo test unit
}

##DOC test_integration - Run all integration tests
task_test_integration() {
  log_running_command "integration tests..."
  task_migrate
  cargo test integration -- --nocapture
  docker-compose down
}

##DOC lint_check - Run linting check by clippy
task_lint_check() {
  log_running_command "linting check..."
  cargo clippy
}

##DOC quality_check - Static check (lint) and testing
task_quality_check() {
  task_fmt_check
  task_lint_check
  task_test_unit
  task_test_integration
}

###############################################################################
# Helper functions
###############################################################################

##DOC help - Print cli usage message
help() {
  echo ""
  echo "Commands:"
  grep -e "^##DOC" < "$(basename "$0")" | sed "s/^##DOC \(.*\)/  \1/"

  exit 1
}

## log running commands
log_running_command() {
  echo "[$(date +%H:%M:%S)] Running $1"
}

## cli main function
main() {
  CMD=${1:-}
  shift || true

  pushd "$DIR" > /dev/null

  if type "task_${CMD}" &> /dev/null; then
    "task_${CMD}" "$@"
  else
    help
  fi

  popd > /dev/null
}

main "$@"
